// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210408210413_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ASPectLibrary.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ebdeccfd-7f32-4020-924e-0ef33300a2ec",
                            ConcurrencyStamp = "ebdeccfd-7f32-4020-924e-0ef33300a2ec",
                            CreatedDate = new DateTime(2021, 4, 8, 14, 4, 12, 672, DateTimeKind.Local).AddTicks(6579),
                            Description = "This is the administrator role.",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "dae1165d-faa2-466c-bc19-f12d8523bd71",
                            ConcurrencyStamp = "dae1165d-faa2-466c-bc19-f12d8523bd71",
                            CreatedDate = new DateTime(2021, 4, 8, 14, 4, 12, 675, DateTimeKind.Local).AddTicks(23),
                            Description = "This is the instructor role.",
                            Name = "Instructor",
                            NormalizedName = "Instructor"
                        },
                        new
                        {
                            Id = "2616a28f-ee3b-4ea6-959e-897106a3ffa4",
                            ConcurrencyStamp = "2616a28f-ee3b-4ea6-959e-897106a3ffa4",
                            CreatedDate = new DateTime(2021, 4, 8, 14, 4, 12, 675, DateTimeKind.Local).AddTicks(66),
                            Description = "This is the student role.",
                            Name = "Student",
                            NormalizedName = "Student"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "5bb3f1ca-d27c-4655-b8d6-6c2b3016f2d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63d1c758-ab11-441a-b684-b4590dd5d92e",
                            Email = "admin@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Adam",
                            LastName = "Aldridge",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ASPECT.COM",
                            NormalizedUserName = "ADMIN@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAeXXNsy4ONVVDDMbNwnkuRkHCy1K2RQkHbgyynPaSAr5X4rDrnEiiJXNw03bFcM1A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dbfdf4a-8d0a-4e8a-97a6-04e3536a5b24",
                            TwoFactorEnabled = false,
                            UserName = "admin@aspect.com"
                        },
                        new
                        {
                            Id = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37615465-3212-4a66-99c7-5ebfa48e6884",
                            Email = "instructor@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Ted",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR@ASPECT.COM",
                            NormalizedUserName = "INSTRUCTOR@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHugSliKqoo6IfFgFxi8vPYDyhFZ2hpIlroClkRZ2+JmC3wVH6lfUQ1xzXEhaMMeCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d189cf6-14ec-48e5-90e2-c3a2d6ef9003",
                            TwoFactorEnabled = false,
                            UserName = "instructor@aspect.com"
                        },
                        new
                        {
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d5fe19ba-67cb-46dd-a33e-3cd289f7c34f",
                            Email = "student@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Myers",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@ASPECT.COM",
                            NormalizedUserName = "STUDENT@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELH9Deji+2pqtdKK65MHwP/MCbQ6oyo3OMZ7WtVUScciu0WjZuD9lnKMYP9f35MauQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd776e9f-ba04-41ef-9934-822a52b1c958",
                            TwoFactorEnabled = false,
                            UserName = "student@aspect.com"
                        },
                        new
                        {
                            Id = "363624a6-1111-4866-b5ee-b135a6fc3870",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa1a2b4d-b968-4368-854d-fafa1907d169",
                            Email = "student2@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Mike2",
                            LastName = "Myers2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@ASPECT.COM",
                            NormalizedUserName = "STUDENT2@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHeP0pDF7f2UAtzsN5LT4i78eRorm/qTeRPcmiH3OZf2k6YJ6v5j4cdgyuJUSwch6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c23d39c2-b2a5-48a0-a274-da6fa6b1f77d",
                            TwoFactorEnabled = false,
                            UserName = "student2@aspect.com"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Course", b =>
                {
                    b.Property<int>("courseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("courseID1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("courseTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("instructorID")
                        .HasColumnType("TEXT");

                    b.Property<string>("projectOutline")
                        .HasColumnType("TEXT");

                    b.Property<string>("term")
                        .HasColumnType("TEXT");

                    b.HasKey("courseID");

                    b.HasIndex("courseID1");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            courseID = 1,
                            courseTitle = "COMP3800 - Practicum",
                            instructorID = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            projectOutline = "https://www.bcit.ca/outlines/20211088135/",
                            term = "4"
                        },
                        new
                        {
                            courseID = 2,
                            courseTitle = "COMP4870 - Intranet Planning & Development",
                            instructorID = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            projectOutline = "https://www.bcit.ca/outlines/20211049852/",
                            term = "4"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Membership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("courseID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("courseID");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = "363624a6-1111-4866-b5ee-b135a6fc3870",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ProgressUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Issues")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastWeekActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("NextWeekActivity")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProgressUpdates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2021, 4, 8, 14, 4, 12, 706, DateTimeKind.Local).AddTicks(3847),
                            Issues = "Schema may need to be reworked",
                            LastWeekActivity = "Finished DB Design",
                            NextWeekActivity = "Going to work on the API",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2021, 4, 8, 14, 4, 12, 706, DateTimeKind.Local).AddTicks(5146),
                            Issues = "Need to find solution for deployment",
                            LastWeekActivity = "Finished API Design",
                            NextWeekActivity = "Going to implement the API",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            AppName = "Twitter",
                            AspNetUserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            CourseId = 1,
                            Description = "An app for tweeting",
                            ProjectCategoryId = 1,
                            TeamName = "RA"
                        },
                        new
                        {
                            ProjectId = 2,
                            AppName = "PlaneGo",
                            AspNetUserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            CourseId = 1,
                            Description = "It's like uber but for planes",
                            ProjectCategoryId = 2,
                            TeamName = "Team Fly"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectCategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectCategoryId");

                    b.ToTable("ProjectCategory");

                    b.HasData(
                        new
                        {
                            ProjectCategoryId = 1,
                            ProjectCategoryName = "Blockchain"
                        },
                        new
                        {
                            ProjectCategoryId = 2,
                            ProjectCategoryName = "React"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ProjectRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requirement")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("ProjectRequirements");
                });

            modelBuilder.Entity("ASPectLibrary.ProjectRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");

                    b.HasData(
                        new
                        {
                            Id = "Arch",
                            RoleName = "Software Architect"
                        },
                        new
                        {
                            Id = "DBA",
                            RoleName = "Database Administrator"
                        },
                        new
                        {
                            Id = "UIUIX",
                            RoleName = "UI/UX Designer"
                        },
                        new
                        {
                            Id = "SD",
                            RoleName = "Software Developer"
                        },
                        new
                        {
                            Id = "PM",
                            RoleName = "Project Manager"
                        },
                        new
                        {
                            Id = "SA",
                            RoleName = "System Administrator"
                        },
                        new
                        {
                            Id = "FE",
                            RoleName = "Front End Developer"
                        },
                        new
                        {
                            Id = "BE",
                            RoleName = "Back End Developer"
                        },
                        new
                        {
                            Id = "QA",
                            RoleName = "Quality Assurance"
                        },
                        new
                        {
                            Id = "TE",
                            RoleName = "Software Tester"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "5bb3f1ca-d27c-4655-b8d6-6c2b3016f2d3",
                            RoleId = "ebdeccfd-7f32-4020-924e-0ef33300a2ec"
                        },
                        new
                        {
                            UserId = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            RoleId = "dae1165d-faa2-466c-bc19-f12d8523bd71"
                        },
                        new
                        {
                            UserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            RoleId = "2616a28f-ee3b-4ea6-959e-897106a3ffa4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ASPectLibrary.Course", b =>
                {
                    b.HasOne("ASPectLibrary.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseID1");

                    b.Navigation("course");
                });

            modelBuilder.Entity("ASPectLibrary.Membership", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", "Student")
                        .WithMany("Memberships")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.Project", "Project")
                        .WithMany("Memberships")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.Course", null)
                        .WithMany("Memberships")
                        .HasForeignKey("courseID");

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ASPectLibrary.ProgressUpdate", b =>
                {
                    b.HasOne("ASPectLibrary.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASPectLibrary.Project", b =>
                {
                    b.HasOne("ASPectLibrary.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("ASPectLibrary.ProjectRequirement", b =>
                {
                    b.HasOne("ASPectLibrary.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPectLibrary.ApplicationUser", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ASPectLibrary.Course", b =>
                {
                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ASPectLibrary.Project", b =>
                {
                    b.Navigation("Memberships");
                });
#pragma warning restore 612, 618
        }
    }
}
